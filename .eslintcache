[{"/Users/orizerah/Workspace/chat-app-fe/src/index.tsx":"1","/Users/orizerah/Workspace/chat-app-fe/src/components/chats/ChatPage.tsx":"2","/Users/orizerah/Workspace/chat-app-fe/src/components/chats/InputForm.tsx":"3","/Users/orizerah/Workspace/chat-app-fe/src/components/auth/SignIn.tsx":"4","/Users/orizerah/Workspace/chat-app-fe/src/redux/types.ts":"5","/Users/orizerah/Workspace/chat-app-fe/src/components/auth/styles.ts":"6","/Users/orizerah/Workspace/chat-app-fe/src/api/authApi.ts":"7","/Users/orizerah/Workspace/chat-app-fe/src/components/core/Copyright.tsx":"8","/Users/orizerah/Workspace/chat-app-fe/src/components/chats/styles.ts":"9","/Users/orizerah/Workspace/chat-app-fe/src/websocketClient/socketClient.ts":"10","/Users/orizerah/Workspace/chat-app-fe/src/components/auth/SignUp.tsx":"11","/Users/orizerah/Workspace/chat-app-fe/src/api/chatApi.ts":"12","/Users/orizerah/Workspace/chat-app-fe/src/config.ts":"13","/Users/orizerah/Workspace/chat-app-fe/src/redux/reducer.ts":"14"},{"size":499,"mtime":1608125047194,"results":"15","hashOfConfig":"16"},{"size":4729,"mtime":1608120943638,"results":"17","hashOfConfig":"16"},{"size":775,"mtime":1608111109253,"results":"18","hashOfConfig":"16"},{"size":3555,"mtime":1608069256408,"results":"19","hashOfConfig":"16"},{"size":294,"mtime":1608069553793,"results":"20","hashOfConfig":"16"},{"size":494,"mtime":1607932720780,"results":"21","hashOfConfig":"16"},{"size":633,"mtime":1608126709711,"results":"22","hashOfConfig":"16"},{"size":438,"mtime":1607877271270,"results":"23","hashOfConfig":"16"},{"size":1672,"mtime":1608057784793,"results":"24","hashOfConfig":"16"},{"size":323,"mtime":1608126817911,"results":"25","hashOfConfig":"16"},{"size":3910,"mtime":1608069265968,"results":"26","hashOfConfig":"16"},{"size":372,"mtime":1608126614595,"results":"27","hashOfConfig":"16"},{"size":53,"mtime":1608126736289,"results":"28","hashOfConfig":"16"},{"size":559,"mtime":1608069556977,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"lwepu4",{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/orizerah/Workspace/chat-app-fe/src/index.tsx",[],"/Users/orizerah/Workspace/chat-app-fe/src/components/chats/ChatPage.tsx",["59","60"],"import React, { useEffect, useState } from \"react\";\nimport clsx from \"clsx\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport List from \"@material-ui/core/List\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport { connect } from \"react-redux\";\n\nimport useStyles from \"./styles\";\nimport { appState } from \"../../redux/types\";\nimport * as chatApi from \"../../api/chatApi\";\nimport MenuItem from \"./MenuItem\";\nimport Message from \"./Message\";\nimport InputForm from \"./InputForm\";\nimport initSocket from \"../../websocketClient/socketClient\";\n\nfunction ChatPage(state: appState) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = useState(false);\n  const [chats, setChats] = useState<any>([]);\n  const [currentChat, setCurrentChat] = useState({\n    name: \"Loading\",\n    messages: [] as any[],\n    _id: undefined,\n  });\n  const [newMessage, setNewMessage] = useState<any>();\n  const [socket, setSocket] = useState<any>();\n\n  useEffect(() => {\n    if (newMessage) {\n      const chat: any = chats.find((c: any) => c._id === newMessage.chatId);\n      if (!chat) return;\n      chat.messages.push({\n        displayName: newMessage.displayName,\n        message: newMessage.message,\n      });\n      if (chat._id === currentChat._id) {\n        setCurrentChat(chat);\n      }\n    }\n  }, [newMessage]);\n\n  const handleSentMessage = (message: string) => {\n    const messageData = {\n      chatId: currentChat._id,\n      message: message,\n      displayName: state.user?.displayName,\n    };\n    //@ts-ignore\n    socket.emit(\"sendMessage\", messageData);\n    const newChat = { ...currentChat };\n    newChat.messages.push(messageData);\n    setCurrentChat(newChat);\n  };\n\n  useEffect(() => {\n    setSocket(initSocket(setNewMessage));\n    const loadChats = async () => {\n      const response = await chatApi.getUserChats(state.user?._id as string);\n      if (response.isAxiosError) {\n        window.alert(\"Failed to fetch chats\");\n        setChats([]);\n      } else {\n        const newChats = response.data;\n        setChats(newChats);\n        console.log(chats);\n        if (newChats.length > 0) {\n          setCurrentChat(newChats[0]);\n        }\n      }\n    };\n    loadChats();\n  }, [state.user]);\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={() => setOpen(true)}\n            edge=\"start\"\n            className={clsx(classes.menuButton, open && classes.hide)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            Argon Chat\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={() => setOpen(false)}>\n            {theme.direction === \"ltr\" ? (\n              <ChevronLeftIcon />\n            ) : (\n              <ChevronRightIcon />\n            )}\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          {chats.map((chat: any, index: number) => (\n            <MenuItem\n              name={chat.name}\n              iconUrl={chat.iconUrl}\n              key={index}\n              setChat={() => setCurrentChat(chat)}\n            />\n          ))}\n        </List>\n      </Drawer>\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open,\n        })}\n      >\n        <div className={classes.drawerHeader} />\n        {currentChat.messages.map((message: any, index) => (\n          <Message\n            displayName={message.displayName}\n            content={message.message}\n            key={index}\n          />\n        ))}\n        <InputForm handleMessage={handleSentMessage} />\n      </main>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: appState) => {\n  return state;\n};\n\nexport default connect(mapStateToProps)(ChatPage);\n","/Users/orizerah/Workspace/chat-app-fe/src/components/chats/InputForm.tsx",[],"/Users/orizerah/Workspace/chat-app-fe/src/components/auth/SignIn.tsx",[],"/Users/orizerah/Workspace/chat-app-fe/src/redux/types.ts",[],"/Users/orizerah/Workspace/chat-app-fe/src/components/auth/styles.ts",[],"/Users/orizerah/Workspace/chat-app-fe/src/api/authApi.ts",[],"/Users/orizerah/Workspace/chat-app-fe/src/components/core/Copyright.tsx",[],"/Users/orizerah/Workspace/chat-app-fe/src/components/chats/styles.ts",[],"/Users/orizerah/Workspace/chat-app-fe/src/websocketClient/socketClient.ts",[],"/Users/orizerah/Workspace/chat-app-fe/src/components/auth/SignUp.tsx",[],"/Users/orizerah/Workspace/chat-app-fe/src/api/chatApi.ts",[],"/Users/orizerah/Workspace/chat-app-fe/src/config.ts",[],"/Users/orizerah/Workspace/chat-app-fe/src/redux/reducer.ts",[],{"ruleId":"61","severity":1,"message":"62","line":50,"column":6,"nodeType":"63","endLine":50,"endColumn":18,"suggestions":"64"},{"ruleId":"61","severity":1,"message":"65","line":82,"column":6,"nodeType":"63","endLine":82,"endColumn":18,"suggestions":"66"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'chats' and 'currentChat._id'. Either include them or remove the dependency array.","ArrayExpression",["67"],"React Hook useEffect has a missing dependency: 'chats'. Either include it or remove the dependency array.",["68"],{"desc":"69","fix":"70"},{"desc":"71","fix":"72"},"Update the dependencies array to be: [chats, currentChat._id, newMessage]",{"range":"73","text":"74"},"Update the dependencies array to be: [chats, state.user]",{"range":"75","text":"76"},[1807,1819],"[chats, currentChat._id, newMessage]",[2695,2707],"[chats, state.user]"]